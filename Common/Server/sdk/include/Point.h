/* Generated by Together */

#ifndef POINT_H
#define POINT_H

/**
 * @persistent 
 */
#pragma pack(push)
#pragma pack(4)

extern const float g_sin[91];
extern const float g_cos[91];
extern const float g_tan[90];

//	namespace	GAME
//{
struct Point
{
 	void move(short dir,long distance);

	long x;
	long y;
};
struct Square
{
	Point	centre;
	long	radius;
};
struct Circle
{
	Point	centre;
	long	radius;
};
struct Rect
{
	Point	ltop;	//左上角
	Point	rbtm;	//右下角
	long width()const{return rbtm.x -ltop.x;}
	long height()const{return rbtm.y -ltop.y;}
};
void  eddy(long x,long y,short dir,long radius,long &retx,long &rety);
short arctan(const Point &src,const Point &dest);//从src到dest得方向夹角
bool operator^(const Square &S1,const Square &S2);//相交函数
bool operator^(const Circle &C1,const Circle &C2);//相交函数
bool operator^(const Rect &R1,const Rect &R2);	  //相交函数

inline bool operator==(const Point &P1,const Point &P2)
{
	return (P1.x==P2.x)&&(P1.y==P2.y);
}
inline bool operator==(const Square&S1,const Square&S2)
{
	return(S1.centre==S2.centre)&&(S1.radius==S2.radius);
}
inline bool operator==(const Circle&C1,const Circle&C2)
{
	return(C1.centre==C2.centre)&&(C1.radius==C2.radius);
}
inline bool operator==(const Rect &R1,const Rect &R2)
{
	return (R1.ltop==R2.ltop)&&(R1.rbtm==R2.rbtm);
}
//	}	//	namespace	GAME
#pragma pack(pop)
#endif //POINT_H
